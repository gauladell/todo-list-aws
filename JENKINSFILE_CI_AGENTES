pipeline {
    agent any
    environment {
        GIT_SSH_KEY = credentials('github')
    }
    stages {
        stage('Get Code') {
            agent {label 'principal'}
            steps {
                script {
                    cleanWs();
                    sh '''  whoami
                        hostname
                    '''
                    sh '''
                     eval `ssh-agent -s`
                     ssh-add ${GIT_SSH_KEY}
                 
                    '''
                    git branch: 'develop', url: 'git@github.com:gauladell/todo-list-aws.git'
                	sh 'mkdir deploy_config'
                	dir("${WORKSPACE}/deploy_config"){
                	    git branch: 'staging', url: 'https://github.com/gauladell/todo-list-aws-config'
                	}
                	stash(name: 'repo')
                }
            }
        }
            
        stage('Static') {
            agent { label 'agente1' }
            steps {
                unstash 'repo'
                 catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    sh '''
                        whoami
                        hostname
                        /usr/bin/python -m flake8 --format=pylint --exit-zero ${WORKSPACE}/src > ${WORKSPACE}/flake8.out
                    '''
                 }     
                recordIssues enabledForFailure: true, tools:[flake8(name: 'Flake8', pattern: 'flake8.out')]
           }
            
        }
        stage('Security') {
            agent { label 'agente1' }
            steps {
                    unstash 'repo'
                    sh '''
                        whoami
                        hostname
                        export PYTHONPATH=${WORKSPACE}
                         /usr/bin/python -m bandit --exit-zero  -r . -f custom -o bandit.out --severity-level medium --msg-template "{abspath}:{line}: [{test_id}, {severity}] {msg}" 
                    '''
                 
                    recordIssues enabledForFailure: true, tools:[pyLint(name: 'Bandit', pattern: 'bandit.out')]
            }
        }
        stage('SAM Build'){
            agent { label 'principal' }
            steps{
                sh'''
                whoami
                hostname
                sam validate --region us-east-1
                sam build
                '''
            }
        }
        stage('SAM Deploy'){
            agent { label 'principal' }
            steps{
               //sam deploy -t  template.yaml  --config-file ${WORKSPACE}/deploy_config/samconfig.toml  --force-upload --no-confirm-changeset --no-fail-on-empty-changeset --stack-name todo-list-aws --config-env staging --role-arn vocalb --profile default --resolve-s3  
                sh'''
                whoami
                hostname
                sam deploy --force-upload --no-confirm-changeset --no-fail-on-empty-changeset --stack-name todo-list-aws --config-env staging  --resolve-s3
                '''
            }
        }
        stage('Integration Test after deploy'){
            agent { label 'agente2' }
            steps{
                script {
                    unstash 'repo'
                    sh '''
                        whoami
                        hostname
                    '''
                    def BASE_URL = sh( script: "aws cloudformation describe-stacks --stack-name todo-list-aws --query 'Stacks[0].Outputs[?OutputKey==`BaseUrlApi`].OutputValue' --region us-east-1 --output text",
                        returnStdout: true)
                    def pyenv_vars = "BASE_URL="+BASE_URL;
                    writeFile(file: '.env', text:pyenv_vars);
                    sh 'export PYTHONPATH=${WORKSPACE}'
                    sh '''
                     python3 -m pytest --junitxml=result-rest.xml ${WORKSPACE}/test/integration/todoApiTest.py
                    '''
                    junit 'result*.xml'
                    
                }
                   
            }
        }
        stage('Promote to Master'){
            agent { label 'principal' }
            steps{
                script {
                    sh '''
                        whoami
                        hostname
                    '''
                    sh('git status')
                    sh('git fetch')
                    sh('git pull origin develop')
                    def release_name = 'release_'+BUILD_ID
                    writeFile(file: 'release', text:release_name)
                    sh('git add .')
                    sh('git commit -m "commit ${release_name}"')
                    sh('git push origin develop')
                    sh('git checkout master')
                    sh('git pull origin master')
                    sh('git merge develop')
                    sh('git push origin master')
                   cleanWs()
                }
            }
        }
        
    }
}
